// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PromomashTestTask.Data.SQLite;

#nullable disable

namespace PromomashTestTask.Data.Migrations.SQLiteMigrations
{
    [DbContext(typeof(SqLiteAppDbContext))]
    [Migration("20231115191452_Seed-Data")]
    partial class SeedData
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.24");

            modelBuilder.Entity("Duende.IdentityServer.EntityFramework.Entities.DeviceFlowCodes", b =>
                {
                    b.Property<string>("UserCode")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasMaxLength(50000)
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("DeviceCode")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Expiration")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("SessionId")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("SubjectId")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.HasKey("UserCode");

                    b.HasIndex("DeviceCode")
                        .IsUnique();

                    b.HasIndex("Expiration");

                    b.ToTable("DeviceCodes", (string)null);
                });

            modelBuilder.Entity("Duende.IdentityServer.EntityFramework.Entities.Key", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Algorithm")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Created")
                        .HasColumnType("TEXT");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("DataProtected")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsX509Certificate")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Use")
                        .HasColumnType("TEXT");

                    b.Property<int>("Version")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Use");

                    b.ToTable("Keys");
                });

            modelBuilder.Entity("Duende.IdentityServer.EntityFramework.Entities.PersistedGrant", b =>
                {
                    b.Property<string>("Key")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ConsumedTime")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasMaxLength(50000)
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Expiration")
                        .HasColumnType("TEXT");

                    b.Property<string>("SessionId")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("SubjectId")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Key");

                    b.HasIndex("ConsumedTime");

                    b.HasIndex("Expiration");

                    b.HasIndex("SubjectId", "ClientId", "Type");

                    b.HasIndex("SubjectId", "SessionId", "Type");

                    b.ToTable("PersistedGrants", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("PromomashTestTask.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("PolicyAcceptDatetimeUtc")
                        .HasColumnType("TEXT")
                        .HasComment("Timestamp of user accepting terms of service policy, UTC.");

                    b.Property<Guid>("PolicyVersionId")
                        .HasColumnType("TEXT")
                        .HasComment("FK, Exact version of terms of service accepted by this user.");

                    b.Property<Guid>("ProvinceId")
                        .HasColumnType("TEXT")
                        .HasComment("FK, User's province of residence.");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.HasIndex("PolicyVersionId");

                    b.HasIndex("ProvinceId");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasComment("Application user.");
                });

            modelBuilder.Entity("PromomashTestTask.Models.Country", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasComment("Country name.");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Countries");

                    b.HasComment("A collection of valid country names.");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0cabb6d7-2c88-50b5-8108-2d03ff2b15da"),
                            Name = "Outland"
                        },
                        new
                        {
                            Id = new Guid("4eab05b5-c6fa-5f31-9ae0-d9901ebdc673"),
                            Name = "Azeroth"
                        });
                });

            modelBuilder.Entity("PromomashTestTask.Models.PolicyVersion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedDateTimeUtc")
                        .HasColumnType("TEXT")
                        .HasComment("Timestamp of when this policy version was created, UTC.");

                    b.Property<string>("PolicyText")
                        .IsRequired()
                        .HasMaxLength(65536)
                        .HasColumnType("TEXT")
                        .HasComment("Text content of this policy version.");

                    b.HasKey("Id");

                    b.ToTable("PolicyVersions");

                    b.HasComment("Terms of service policy versions.");
                });

            modelBuilder.Entity("PromomashTestTask.Models.Province", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("TEXT")
                        .HasComment("FK, Country which this province belongs to.");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasComment("Province name.");

                    b.HasKey("Id");

                    b.HasIndex("CountryId", "Name")
                        .IsUnique();

                    b.ToTable("Provinces");

                    b.HasComment("Top-level administrative subdivisions of countries.");

                    b.HasData(
                        new
                        {
                            Id = new Guid("6ac4b2fa-effc-5535-9e70-2cad13fadf1c"),
                            CountryId = new Guid("0cabb6d7-2c88-50b5-8108-2d03ff2b15da"),
                            Name = "Netherstorm"
                        },
                        new
                        {
                            Id = new Guid("99f11b6f-25cc-5ead-a37c-d7f726ebb267"),
                            CountryId = new Guid("0cabb6d7-2c88-50b5-8108-2d03ff2b15da"),
                            Name = "Blades Edge Mountains"
                        },
                        new
                        {
                            Id = new Guid("53e050b1-cd32-5510-a813-dc3acf0e7e4c"),
                            CountryId = new Guid("0cabb6d7-2c88-50b5-8108-2d03ff2b15da"),
                            Name = "Hellfire Peninsula"
                        },
                        new
                        {
                            Id = new Guid("abf423e0-0bf8-5a9c-8d34-a7dfc394e973"),
                            CountryId = new Guid("0cabb6d7-2c88-50b5-8108-2d03ff2b15da"),
                            Name = "Zangarmarsh"
                        },
                        new
                        {
                            Id = new Guid("add2811d-613a-53fb-b617-7b00dfd86720"),
                            CountryId = new Guid("0cabb6d7-2c88-50b5-8108-2d03ff2b15da"),
                            Name = "Nagrand"
                        },
                        new
                        {
                            Id = new Guid("998fb25f-b61d-5d90-8376-30f05f87e126"),
                            CountryId = new Guid("0cabb6d7-2c88-50b5-8108-2d03ff2b15da"),
                            Name = "Terokkar Forest"
                        },
                        new
                        {
                            Id = new Guid("9463c17b-e669-5941-8d71-0d5e959b6d13"),
                            CountryId = new Guid("0cabb6d7-2c88-50b5-8108-2d03ff2b15da"),
                            Name = "Shadowmoon Valley"
                        },
                        new
                        {
                            Id = new Guid("a8505ad1-6dfb-5a1e-9257-caf1c23f60ca"),
                            CountryId = new Guid("4eab05b5-c6fa-5f31-9ae0-d9901ebdc673"),
                            Name = "Kalimdor"
                        },
                        new
                        {
                            Id = new Guid("cf57e1ef-fcef-5a8e-b358-e39ea91cd9a0"),
                            CountryId = new Guid("4eab05b5-c6fa-5f31-9ae0-d9901ebdc673"),
                            Name = "Northrend"
                        },
                        new
                        {
                            Id = new Guid("f9c38568-4490-5f86-90f3-f7fe740ba3fd"),
                            CountryId = new Guid("4eab05b5-c6fa-5f31-9ae0-d9901ebdc673"),
                            Name = "Broken Isles"
                        },
                        new
                        {
                            Id = new Guid("b49777bc-7c0f-5806-8672-5343d90ff9fa"),
                            CountryId = new Guid("4eab05b5-c6fa-5f31-9ae0-d9901ebdc673"),
                            Name = "Kul Tiras"
                        },
                        new
                        {
                            Id = new Guid("e1d570a6-b267-5d72-bf50-6435a4f22db5"),
                            CountryId = new Guid("4eab05b5-c6fa-5f31-9ae0-d9901ebdc673"),
                            Name = "Eastern Kingdoms"
                        },
                        new
                        {
                            Id = new Guid("a64bbf36-eff5-51ec-8e40-b9149f045014"),
                            CountryId = new Guid("4eab05b5-c6fa-5f31-9ae0-d9901ebdc673"),
                            Name = "Zandalar"
                        },
                        new
                        {
                            Id = new Guid("643b0680-fe42-581a-9b29-bfac979992a7"),
                            CountryId = new Guid("4eab05b5-c6fa-5f31-9ae0-d9901ebdc673"),
                            Name = "Pandaria"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("PromomashTestTask.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("PromomashTestTask.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PromomashTestTask.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("PromomashTestTask.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PromomashTestTask.Models.ApplicationUser", b =>
                {
                    b.HasOne("PromomashTestTask.Models.PolicyVersion", "PolicyVersion")
                        .WithMany("Users")
                        .HasForeignKey("PolicyVersionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PromomashTestTask.Models.Province", "Province")
                        .WithMany("Users")
                        .HasForeignKey("ProvinceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("PolicyVersion");

                    b.Navigation("Province");
                });

            modelBuilder.Entity("PromomashTestTask.Models.Province", b =>
                {
                    b.HasOne("PromomashTestTask.Models.Country", "Country")
                        .WithMany("Provinces")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("PromomashTestTask.Models.Country", b =>
                {
                    b.Navigation("Provinces");
                });

            modelBuilder.Entity("PromomashTestTask.Models.PolicyVersion", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("PromomashTestTask.Models.Province", b =>
                {
                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
